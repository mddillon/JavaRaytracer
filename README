-----Java Raytracer-----

This is a raytracer project made using JavaFX. It will interpret a
scene file containing information on the objects to be displayed and their
properties. Scene description language below.

Scene Description Language
--------------------------
This JavaFX raytracer loads a scene from a text file that properly adheres to the following constraints.
    1. "#" symbols are used for comments. Only single-line comments allowed.
    2. A single-line element begins with a keyword. Multi-line elements must begin AND end with a keyword.
    3. All colors are floating-points between 0.0 and 1.0.
    4. Vertices of a polygon are called in clockwise order

IMPORTANT: The camera/eye position defaults to (0, 0, 0) and aims down the negative z axis. Adjustments can be made by using the camera block elements.

Single-line Elements
    # fov angle
        Specifies field of view angle
    # eye x y z
        Specifies the world coordinates of the camera/eye
    # background r g b
        Specifies background color
    # light x y z r g b
        Specifies a pinlight's position and color
    # ambient r g b
        Specifies a surface's ambient color
    # diffuse r g b
        Specifies a surface's diffuse color
    # specular r g b p
        Specifies a surface's specular attributes: color and phong coefficient
    # reflective k
        Specifies a surface's reflectance; between 0.0 and 1.0
    # sphere radius x y z
        Specifies a sphere's radius and world coordinates

Block Elements

    # begin
    # vertex x y z
    # end
        These keywords are used to define a polygon. Currently, only triangles are supported. Therefore, exactly 3 vertex calls must be made between begin and end. Quads may be supported in the future.

    # beginCamera
    # position x y z
    # spin angle
    # tilt angle
    # endCamera
        These keywords are used to perform camera adjustments. The position is in world coordinates, and the angles are both in radians. 'Spin' refers to the rotation in the xz plane, and tilt is the verticle angle.

    # beginPlane
        [OPTION 1]
        # Ray x y z u v w
        [OPTION 2]
        # point x y z
    # endPlane
        These keywords are used to define a plane. The plane can be defined in one of two ways. The first option is to use a ray with origin (x, y, z) and direction (u, v, w). The second option is to provide 3 non-linear points that lie in the plane. Points must be provided in clockwise order.

Anticipated Features
--------------------
	# Support for Intersection of Quads
	# Support for External Object Files
	# Transparency and Diffraction
	# Multiple Light Sources and Soft Shadows
	# Antialiasing, Depth of Field, and Motion Blur
	# Texture Mapping?
	# Elapsed and Estimated Remaining Time
